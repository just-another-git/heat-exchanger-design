# -*- coding: utf-8 -*-
"""HE_Design_Group_IV.ipynb

Automatically generated by Colaboratory.
"""

#         PROCESS EQUIPMENT DESIGN LABORATORY - 1
#        Design of a Shell and Tube Heat Exchanger

"""# Process Design

### Library to Install
"""

#pip install CoolProp

"""### Libraries Used"""

import math
from CoolProp.CoolProp import PropsSI
degree_sign = u"\N{DEGREE SIGN}"

"""### User Input"""

print("This code calculates the Design parameters of a Shell & Tube Heat Exchanger only.")
print("This code works only for 'Heavy Naphtha' as the hot fluid and 'Water'(Towns Water specifically) as the Coolant.")
print("\tProvide the Following Inputs:")
print("\t\tEnter Mass flow rate(in kg/s) of Heavy Naphtha stream in the next line")
mflowrate = input('\t\t ELSE type "g" for using the relation "m(in kg/s) = 4+0.03*GroupNo.":')
if (mflowrate == 'g' or mflowrate=='G'):
  k = int(input('\t\t Enter Group Number: '))
  mflowrate_h = 4+0.03*k
else:
  mflowrate_h = int(mflowrate)
print("\t\tThe mass flow rate of the Heavy Naphtha stream is ", mflowrate_h,"kg/s", sep='')
del k
del mflowrate
print("\n\t\tPlease input the following values in degree Celsius.")
T_hi = float(input("\t\t  Intial Temperature of the Hot Fluid: "))
T_ho = float(input("\t\t  Desired Final Temperature of the Hot Fluid: "))
T_ci = float(input("\t\t  Coolant initial temperature: "))
T_co = float(input("\t\t  Coolant final temperature: "))

print("\n\n\n")
"""### Basic Calculatoins"""

# Cp_h is the specific heat capacity of the hot fluid at caloric temp
# Cp_c is the specific heat capacity of the cold fluid at caloric temp
# T_hi = Temperature of the hot fluid before entering
# T_ho = Temperature of the hot fluid while exiting
# T_ci & T_co
# mflowrate_h and mflowrate_c

"""### Caloric Factor(Kc from API graph) (D.Q. Kern, Pg. 827)"""

def Kc_from_API(api, t):
  t = (9*t)/5 + 32
  c1 = 0.766506 + (0.0132417*t) - (1.02865*(t/100)*(t/100)) + (0.36681*math.pow(t/100, 3)) - ((5.9763*math.pow(t/100, 4))/100) + (3.7066*math.pow(t/100, 5) / 1000)
  c2 = -0.124687 + ((5.02722*t)/10000) - (2.69387*(t/1000)*(t/1000)) + (9.5991*math.pow(t/1000, 3)) - ((1.6992*math.pow(t/100, 4))/1000) + ((1.1212*math.pow(t/100, 5))/10000)
  c3_104 = 8.23768 - (0.0795248*t) + (4.67827*(t/100)*(t/100)) - (1.44508*math.pow(t/100, 3)) + (0.21488*math.pow(t/100, 4)) - (0.012001 * math.pow(t/100, 5))
  return math.exp(c1 + c2*api + c3_104*(api/100)*(api/100))

"""### Fc from Kc"""

api_h = 47.3  #Heavy Naphtha, Hibernia, from Chevron site #Degree API
api_c = 10    #Fresh Water
del_t1 = T_hi-T_ho
if del_t1<10:
  Fc = 1/2
else:
  Kc = Kc_from_API(api_h, del_t1)
  rn = T_ho - T_ci
  rd = T_hi - T_co
  Fc = Kc*rn/(rn-rd)
  rn = (math.log(Kc+1)/math.log(rn/rd))
  Fc = (Fc-rn)/(Kc+Kc*rn)
print("\tCaloric Fraction = ","%.4f"%Fc,sep='')
del del_t1
del rn
del rd

print("\n")
"""### Caloric Temperature from Fc"""

T_hc = T_ho + Fc*(T_hi-T_ho)    #Caloric Temperature of Hot Fluid
T_cc = T_ci + Fc*(T_co-T_ci)    #Caloric Temperature of Cold Fluid

print("\tCaloric Temperature of the Shell Side/Hot Fluid: ",'%.4f'%T_hc,degree_sign,"C",sep='')
print("\tCaloric Temperature of the Tube Side/Cold Fluid: ",'%.4f'%T_cc,degree_sign,"C",sep='')

print("\n")
"""### Cp vs T"""

x = [ 10,  15,  20,  25,  30,  35,  40,  45,  50,  55,  60,  65,  70, 75,  80,  85,  90,  95, 100, 105]
y = [0.456, 0.459, 0.461, 0.464, 0.467, 0.469, 0.472, 0.474, 0.477, 0.48 , 0.482, 0.485, 0.488, 0.49 , 0.493, 0.495, 0.498, 0.501, 0.503, 0.506]
def estimate_coef(x, y): 
    # number of observations/points 
    n = len(x) 
  
    # mean of x and y arrays 
    m_x, m_y = sum(x)/n, sum(y)/n 

    product=[]
    for num1, num2 in zip(x,y):
      product.append(num1*num2)      
  
    # calculating cross-deviation and deviation about x 
    SS_xy = sum(product) - n*m_y*m_x
    product =[]
    for num1 in x:
          product.append(num1*num1) 
    SS_xx = sum(product) - n*m_x*m_x 
    del product
    del num1
    del num2
    del n
    # calculating regression coefficients 
    b_1 = SS_xy / SS_xx 
    b_0 = m_y - b_1*m_x 

    return(b_0, b_1)

def Naphtha_Cp_t(t):            #https://cameochemicals.noaa.gov/chris/PTN.pdf
  t = (9*t)/5 + 32
  c1, c2 = estimate_coef(x, y)   #linear regression
  return (c1 + c2*t)*4186.8      #return value in SI Units

"""### ENTHALPY BALANCE"""

Cp_h = Naphtha_Cp_t(T_hc)                 #Cp of Naphtha at its caloric temperature in SI
q_rate = mflowrate_h * Cp_h * (T_hi-T_ho)   # average heat transfer rate in J/s(or)W
print("\tRate of Heat Transfer, Q = ","%.4f"%q_rate, "J/s",sep='')

Cp_c = PropsSI("C","T|liquid" ,T_cc+273.15,"P" ,344155.85020489997793985448205, "Water") # Specific heat capacity of water at caloric temperature
mflowrate_c = q_rate/(Cp_c*(T_co-T_ci))    #mass flow rate of cold fluid
print("\t\tMass Flow Rate of the Coolant = ", "%.4f"%mflowrate_c, "kg/s", sep='')
print("\n")

"""### LMTD"""

del_t1 = T_hi - T_co
del_t2 = T_ho - T_ci

lmtd = (del_t1 - del_t2)/(math.log(del_t1/del_t2))
print("\tLMTD = ","%0.4f"%lmtd,"K",sep='')

del del_t1
del del_t2
print("\n")

"""### LMTD Correction Factor Ft"""

Rn = T_hi - T_ho
Rd = T_co - T_ci
Sn = T_co - T_ci
Sd = T_hi - T_ci

# 1-2 HE
rv = math.sqrt(Rn*Rn + Rd*Rd) #rough variable
rv3 = rv
rv = rv/(Rn-Rd)
Ft1_2 = rv
rv = Rd*(Sd-Sn)/(Rd*Sd - Rn*Sn)
rv = math.log(rv)
Ft1_2 *= rv
Ft2_4 = Ft1_2 / 2
rv = Sn * (Rn + Rd - rv3)
rv = 2*Sd*Rd - rv
rv2 = Sn * (Rn + Rd + rv3)
rv2 = 2*Sd*Rd - rv2
Ft1_2 /= math.log(rv/rv2)              #Ft for 1-2 HE, calculated.

# 2-4 HE
rv = 2*Rd*Sd - Sn*Rd - Rn*Sn
rv += 2*math.sqrt(Rd*(Sd-Sn)*(Rd*Sd-Rn*Sn))
Ft2_4 /= math.log((rv+Sn*rv3)/(rv-Sn*rv3))

print("\tLMTD correction Factor for 1 shell pass and 2 or more tube passes")
print("\t\tFt = ",'%.4f'%Ft1_2,sep='')
print("\tLMTD correction Factor for 2 shell pass and 4 or more tube passes")
print("\t\tFt = ",'%.4f'%Ft2_4,sep='')


if Ft1_2<0.9:
      Ft = Ft2_4
      shell_pass = 2
      print("\t2-4 Heat Exchanger is the better option. The code will proceed calculating parameters for 2-4 HE.")
else:
      Ft = Ft1_2
      shell_pass = 1
      print("\t1-2 or 1-4 Heat Exchanger is the better option. As Ft>=0.9. The code will proceed calculating parameters for 1-x HE.")

del rv
del rv2       #deleting rough variables
del rv3
del Rn
del Sn
del Rd
del Sd

print("\n")

"""### Area and U(assumed)"""

U_assum = (50+125)*5.678263341123/2     #SI Units, W/((sq.m).K)
print("\tIteration 0, U(assumed) = ", "%.4f"%U_assum, "W/sq.m/K",sep ='')
Area = q_rate/(U_assum*lmtd*Ft)
Area
print("\tArea = ", "%.4f"%Area, "sq.m", sep ='')
print("\n")

"""### **No**. of Tubes calculated(nt)"""

print("\tUsing the standard values for \n\tTube ID = 3/4 inch\n\tTube OD = 1inch\n\tTube Length = 20ft")
do = 1*0.0254          #outer diameter
di = 3*0.0254/4      #inner diameter

tube_len = 20*0.3048   #tube length assumed to be 20 inch and stored in SI
nt = Area/(math.pi * do * tube_len)   #nt calculated
nt
print("\n")
print("\tRequired number of Tubes =", math.ceil(nt))
print("\n")

"""### Number of Tubes(na) and Shell dimensions:      Table 9 (Pgs 841 & 842 of D.Q. Kern)"""

from bisect import bisect_left 

def sq_tube_passes(nt, Nt):
  shell_id_in = [8.0, 10.0, 12.0, 13.25, 15.25, 17.25, 19.25, 21.25, 23.25, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0]
  P1 = [21, 32, 48, 61, 81, 112, 138, 177, 213, 260, 300, 341, 406, 465, 522, 596, 665]
  P2 = [16, 32, 45, 56, 76, 112, 132, 166, 208, 252, 288, 326, 398, 460, 518, 574, 644]
  P4 = [14, 26, 40, 52, 68, 96, 128, 158, 192, 238, 278, 300, 380, 432, 488, 562, 624]
  P6 = [0, 24.0, 38.0, 48.0, 68.0, 90.0, 122.0, 152.0, 184.0, 226.0, 268.0, 294.0, 368.0, 420.0, 484.0, 544.0, 612.0]
  P8 = [0, 0, 36.0, 44.0, 64.0, 82.0, 116.0, 148.0, 184.0, 222.0, 260.0, 286.0, 358.0, 414.0, 472.0, 532.0, 600.0]
  if Nt==1:
    i = bisect_left(P1, int(nt))
    return P1[i], shell_id_in[i]*0.0254
  elif Nt==2:
    i = bisect_left(P2, int(nt))
    return P2[i], shell_id_in[i]*0.0254
  elif Nt==4:
    i = bisect_left(P4, int(nt))
    return P4[i], shell_id_in[i]*0.0254
  elif Nt==6:
    i = bisect_left(P6, int(nt))
    return P6[i], shell_id_in[i]*0.0254
  elif Nt==8:
    i = bisect_left(P8, int(nt))
    return P7[i], shell_id_in[i]*0.0254

def tri_tube_passes(nt, Nt):
  shell_id_in = [8.0, 10.0, 12.0, 13.25, 15.25, 17.25, 19.25, 21.25, 23.25, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0]
  P1 = [21, 32, 55, 68, 91, 131, 163, 199, 241, 294, 349, 397, 472, 538, 608, 674, 766]
  P2 = [16, 32, 52, 66, 86, 118, 152, 188, 232, 282, 334, 376, 454, 522, 592, 664, 736]
  P4 = [16, 26, 48, 58, 80, 106, 140, 170, 212, 256, 302, 338, 430, 486, 562, 632, 700]
  P6 = [14, 24, 46, 54, 74, 104, 136, 164, 212, 252, 296, 334, 424, 470, 546, 614, 688]
  P8 = [0, 0, 44.0, 50.0, 72.0, 94.0, 128.0, 160.0, 202.0, 242.0, 286.0, 316.0, 400.0, 454.0, 532.0, 598.0, 672.0]
  if Nt==1:
    i = bisect_left(P1, int(nt))
    return P1[i], shell_id_in[i]*0.0254
  elif Nt==2:
    i = bisect_left(P2, int(nt))
    return P2[i], shell_id_in[i]*0.0254
  elif Nt==4:
    i = bisect_left(P4, int(nt))
    return P4[i], shell_id_in[i]*0.0254
  elif Nt==6:
    i = bisect_left(P6, int(nt))
    return P6[i], shell_id_in[i]*0.0254
  elif Nt==8:
    i = bisect_left(P8, int(nt))
    return P7[i], shell_id_in[i]*0.0254

"""### Number of Tubes(na) and Shell ID"""

rho_W = PropsSI('D','T|liquid',T_cc+273.15,'P',344155.85020489997793985448205,'Water')    #Density of Water
mu_W = PropsSI('V','T|liquid',T_cc+273.15,'P',344155.85020489997793985448205,'Water')     #Viscosity of Water

Pt = 1.25*0.0254                #assuming  1in. OD Tubes, Pt = 1.25in.
Nt = 4                                           #Since 2-4 HE
na_sq, Ds_sq = sq_tube_passes(nt, Nt)            #The no. of Tubes na and the Shell internal diameter found from Table 9 for Square Pitch

na_tri, Ds_tri = tri_tube_passes(nt, Nt)         #The no. of Tubes na and the Shell internal diameter found from Table 9 for Triangle Pitch

if (shell_pass==1):
      print("\tTube passes = 4 for greater turbulance")
else:
      print("\tSince 2-4 HE is being designed, Tube passes = 4")
print("\tSquare Pitch:\n\t\tna =", na_sq,"\n\t\tShell ID =", '%.2f'%(Ds_sq/0.0254),"inch")
print("\tTriangle Pitch:\n\t\tna =", na_tri,"\n\t\tShell ID =", '%.2f'%(Ds_tri/0.0254), "inch")
print("\n")
print("Square Pitch is prefered over Triangle Pitch. And this code will proceed for Square Pitch.")
print("\n")
"""### Tube Side Reynold Number"""

Re_tube = (4*mflowrate_c*Nt)/(math.pi*di*mu_W*na_sq)  # Reynolds number for tube side
print("\tTube Side Reynolds Number, Re|tube =",'%.4f'%Re_tube)
print("\n")

"""###Tube Side Heat Transfer Coefficient"""

K_w = PropsSI('L','T|liquid',T_cc+273.15,'P',344155.85020489997793985448205,'Water')     # Thermal conductivity of water at caloric temoprature
mu_Wh = PropsSI('V','T|liquid',T_hc+273.15,'P',344155.85020489997793985448205,'Water')   #Viscosity of water at wall temp = caloric temp of hot fluid
Pr_w =  (Cp_c*mu_W)/K_w # Prandtl number
Nu = 0.027*pow(Re_tube,0.8)*pow(Pr_w,1/3)*pow(mu_W,0.14)/pow(mu_Wh,0.14) # using Dittus Boilter equation
hi = Nu*K_w/di     #Convective Heat Transfer Coefficient of Water
print("\tTube Side Heat Transfer Coefficient, hi = ", '%.4f'%hi,"W/sq.m/K",sep='')
print("\n")

"""### Regression relation of viscosity of Naphtha with Temp"""

def mu_naphtha_wrtT(t):
  t = 9*t/5 + 32
  return 0.0483114*math.exp((1796.66/(t+263.14)) - 0.00945379*t)/1000       #regression for viscosity of Naphtha Ae^(B/T+CT), when T is in Kelvin

"""### Shell side Reynolds No."""

B = Ds_sq/2    #Baffle spacing
C = Pt - do    #Tube Clearance
a_shell = C*B*Ds_sq/Pt    #Shell side cross flow area
D_eq = (4*Pt*Pt - math.pi*do*do)/(math.pi*do)
mu_nap_th = mu_naphtha_wrtT(T_hc)
mu_nap_tc = mu_naphtha_wrtT(T_cc)
K_naph = 1.040*0.14422788886428             #Thermal Conductivity of Naphtha in SI, practically constant wrt T
Re_shell = mflowrate_h*D_eq/a_shell/mu_nap_th
print("\tShell Side Reynolds Number, Re|shell = "'%.4f'%Re_shell)
print("\n")

"""### jH vs Re_shell of Pg. 838 of D.Q. Kern"""

def jH_from_re(Re):
  return 0.806455 + 0.36921*pow(Re, 0.541044)

"""### Shell side Heat Transfer Coeff and jH"""

jH = jH_from_re(Re_shell)
Pr_nap = Cp_h*mu_nap_th/K_naph
ho = jH*pow(K_naph,2/3)*pow(Cp_h,1/3)*pow(mu_nap_th,(0.14+1/3))/pow(mu_nap_tc,0.14)/D_eq           #Conductive Heat Transfer of Naphtha
print("\tShell Side Heat Transfer Coefficient, ho = ", '%.4f'%ho, "W/sq.m/K",sep='')
print("\n")

"""### Calculated U"""

K_wall = 54           #Thermal Conductivity of Carbon Steel
Rdi = 0.00075         # Tube inside dirt fouling factor
Rdo = 0.00018         # Tube outside dirt fouling factor
Ucal = 9*hi*ho*K_wall
rough = (do-di)*hi + 2*Rdi*K_wall*hi + 2*K_wall
rough = 8 * rough * ho
rough = rough + 9*hi*K_wall*(1+Rdo*ho)
Ucal = Ucal/rough
del rough
print("\tIteration 0, U(calculated) = ", '%.4f'%Ucal, "W/sq.m/K",sep='')
print('\n')

"""### Relative error"""

rel_error = abs((Ucal-U_assum)/U_assum)*100 # Tolerance of U
rel_error
print("Iteration 0\n\tUcal = ", '%.4f'%Ucal, "W/sq.m/K", "\n\tRelative error = ", '%.4f'%rel_error, "%",sep='')
print("\n\n")

tolerance_U = float(input("Enter Design Tolerance(%): "))
print("\n")

"""## Re-Iterations"""

counter = 1
if(rel_error>tolerance_U):
      print("Re-iterating to reduce relative error.\n")
while (rel_error>tolerance_U):
  
  print("Iteration ", counter,":",sep='')
  
  U_assum = Ucal     #SI Units, W/((sq.m).K)
  Area = q_rate/(U_assum*lmtd*Ft2_4)
  print("\t\tArea = ", "%.4f"%Area, "sq.m", sep ='')

  nt = Area/(math.pi * do * tube_len)   #nt calculated
  print("\t\tRequired number of Tubes =", math.ceil(nt))

  na_sq, Ds_sq = sq_tube_passes(nt, Nt)            #The no. of Tubes na and the Shell internal diameter found from Table 9 for Square Pitch
  print("\t\tSquare Pitch:\n\t\t\tna =", na_sq,"\n\t\t\tShell ID =", '%.2f'%(Ds_sq/0.0254),"inch")

  Re_tube = (4*mflowrate_c*Nt)/(math.pi*di*mu_W*na_sq)  # Reynolds number for tube side
  print("\t\tTube Side Reynolds Number, Re|tube =",'%.4f'%Re_tube)

  Nu = 0.027*pow(Re_tube,0.8)*pow(Pr_w,1/3)*pow(mu_W,0.14)/pow(mu_Wh,0.14) # using Dittus Boilter equation
  hi = Nu*K_w/di     #Convective Heat Transfer Coefficient of Water
  print("\t\tTube Side Heat Transfer Coefficient, hi = ", '%.4f'%hi,"W/sq.m/K",sep='')

  B = Ds_sq/2    #Baffle spacing
  a_shell = C*B*Ds_sq/Pt    #Shell side cross flow area
  Re_shell = mflowrate_h*D_eq/a_shell/mu_nap_th
  print("\t\tShell Side Reynolds Number, Re|shell = "'%.4f'%Re_shell)

  jH = jH_from_re(Re_shell)
  ho = jH*pow(K_naph,2/3)*pow(Cp_h,1/3)*pow(mu_nap_th,(0.14+1/3))/pow(mu_nap_tc,0.14)/D_eq           #Conductive Heat Transfer of Naphtha
  print("\t\tShell Side Heat Transfer Coefficient, ho = ", '%.4f'%ho, "W/sq.m/K",sep='')

  Ucal = 9*hi*ho*K_wall
  rough = (do-di)*hi + 2*Rdi*K_wall*hi + 2*K_wall
  rough = 8 * rough * ho
  rough = rough + 9*hi*K_wall*(1+Rdo*ho)
  Ucal = Ucal/rough
  del rough

  rel_error = abs((Ucal-U_assum)/U_assum)*100 # Relative error

  print("\n")
  print("Iteration ",counter,":\n\tUcal = ", '%.4f'%Ucal, "W/sq.m/K", "\n\tRelative error = ", '%.4f'%rel_error, "%",sep='')
  print("\n")

  if (counter >10):
    print("Iterated 10 times already and relative error fails to go below given tolerance%. Terminiating the Iterative Process!")
    break
    
  counter = counter+1

print("\n")

print("Final values:")
print("\tOverall heat transfer coefficient U = ", '%.4f'%Ucal, "W/sq.m/K",sep='')
print("\tActual number of Tubes na =",na_sq)
print("\tTube Side Reynolds Number Re|tube =", '%.4f'%Re_tube)
print("\tTube passes = 4\n\n")

"""## Pressure Drop"""

max_delp = float(input("Enter the maximum Tube Side Pressure Drop allowed(in psi): "))
print("\n")

def TEMA_friction_factor(Re):
  if Re<2300:
    print("The final Re of Tube is",Re);
    print("The Tube side flow is Laminar.")
  if Re>25000:
    return (1/pow((0.0784538*math.log(Re+1.17926)+1.03963),5.58109)) - 0.00286896
  else:
    return 0.00269998+0.526772/pow(Re,0.288988)

f = TEMA_friction_factor(Re_tube)              #friction factor
g = 9.80665                                    #acceleration due to gravity
v_tube = 4 * mflowrate_c * Nt / (rho_W*math.pi*di*di*na_sq)       #tube side velocity
delta_Pf = 8 * mflowrate_c * mflowrate_c * f * Nt * Nt * tube_len / (math.pi*math.pi*pow(di,5)*na_sq*na_sq*rho_W)    #Frictional Pressure Drop (Darcy - Weisbatch Eq)
delta_Pr = 2 * Nt * v_tube * v_tube * 1000 / (rho_W * g)
delta_P= delta_Pf + delta_Pr # calculation of pressure Drop

delta_P_psi = 0.0001450377 * delta_P

print("Tube Side Pressure Drop = " '%.4f'%delta_P_psi,"psi"," = ", '%.4f'%delta_P, "Pa", "\n",sep='')

"""## Area Overdesign"""

print("Required Number of Tubes =",math.ceil(nt), "\n")
overdesign = ((na_sq-math.ceil(nt))/math.ceil(nt))*100   # calculation of area overdesign
print("% overdesign = ", '%.4f'%overdesign,"%","\n",sep='')

